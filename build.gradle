plugins {
    id 'java'
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version '8.1.1' apply false
}

allprojects {
    apply plugin: "java"

    group = rootProject.maven_group
    version = rootProject.release_version
    base.archivesName = "${rootProject.archives_base_name}-${project.name}"

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "JitPack"
            url = "https://jitpack.io/"
        }
        maven {
            name = "Papi"
            url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
        }
        maven {
            name = "CodeMC"
            url = "https://repo.codemc.org/repository/maven-public/"
        }
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    def targetJavaVersion = 17
    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'

        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(targetJavaVersion)
        }
    }

    compileJava.dependsOn(clean)

    jar {
        archiveClassifier.set "dev"

        zip64 true
    }

    sourcesJar {
        archiveClassifier.set "dev-source"

        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compileOnly "net.luckperms:api:5.4"

        annotationProcessor 'org.projectlombok:lombok:1.18.32'
        compileOnly 'org.projectlombok:lombok:1.18.32'

        annotationProcessor(testImplementation("org.projectlombok:lombok:1.18.32"))
        testImplementation platform('org.junit:junit-bom:5.10.2')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()

        ignoreFailures true

        testLogging {
            exceptionFormat = 'full'
            events "passed", "skipped", "failed"
        }
    }

    shadowJar {
        archiveClassifier.set null

        zip64 true
    }

    publishing {
        publications {
            MavenJava(MavenPublication) {
                artifactId = "HorizontalNekoPlugin-" + project.name
                from components.java
            }
        }

        repositories {
            mavenLocal()
        }
    }
}

tasks.register("buildArtifacts") {
    subprojects {
        dependsOn project.tasks.named("build").get()
        dependsOn project.tasks.named("shadowJar").get()
    }

    doFirst {
        logger.lifecycle(":executing 2 steps to build artifacts")
        logger.lifecycle(":step1 clean buildLibs of rootProject")
        delete fileTree(rootProject.buildDir.toPath().resolve("libs")) {
            include '*'
        }

        logger.lifecycle(":step2 copy buildLibs from subprojects")
        subprojects {
            copy {
                from(project.buildDir.toPath().resolve("libs")) {
                    include "*.jar"
                }

                into(rootProject.buildDir.toPath().resolve("libs"))
                duplicatesStrategy DuplicatesStrategy.EXCLUDE
            }
        }
    }

    doLast {
        logger.lifecycle(":buildArtifacts done")
    }
}
